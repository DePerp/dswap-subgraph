type Deployed @entity(immutable: true) {
  id: Bytes!
  Factory_id: BigInt! # uint256
  tokenAddress: Bytes! # address
  stakingAddress: Bytes! # address
  feeAmount: BigInt! # uint256
  blockNumber: BigInt!
  blockTimestamp: BigInt!
  transactionHash: Bytes!
}

type DSwapToken @entity {
  id: ID!
  token: String!
  name: String!
  symbol: String!
  iconIPFS: String!
  count: BigInt!
  price: BigDecimal!
  initialPrice: BigDecimal!
  bundle: Bundle!
  createdAt: BigInt!
}

type Bundle @entity {
  id: ID!
  token: String!
  price: BigDecimal!
  timestamp: BigInt!
  dswapTokens: [DSwapToken!]! @derivedFrom(field: "bundle")
}

enum PriceType {
  _MIN,
  _10MIN,
  _HOUR,
  _4HOUR,
  _DAY
}

type TokenData @entity {
  id: ID!
  timestamp: BigInt!

  buyVolume: BigDecimal!
  sellVolume: BigDecimal!

  buyVolumeUSD: BigDecimal!
  sellVolumeUSD: BigDecimal!

  buyAmount: BigInt!
  sellAmount: BigInt!

  token: DSwapToken!
}

type CandleStick @entity {
  id: ID!
  open: BigDecimal!
  high: BigDecimal!
  low: BigDecimal!
  close: BigDecimal!
  timestamp: BigInt!
}

type HistoricalTokenPrice @entity {
  id: ID!
  token: DSwapToken!
  priceType: PriceType!
  averagePrice: BigDecimal!
  timestamp: BigInt!
  prices: [BigDecimal!]!
  candleStick: CandleStick!
  stats: TokenData
}

type TotalTokenStats @entity {
  id: ID!
  token: DSwapToken!
  totalBuyVolume: BigDecimal!
  totalSellVolume: BigDecimal!
  amountBuy: Int8!
  amountSell: Int8!
}

#type TokenStats @aggregation(intervals: ["hour", "day"], source: "TokenData") {
#  id: Int8!
#  timestamp: Timestamp!
#  token: DSwapToken!
#  totalBuyVolume: BigDecimal! @aggregate(fn: "sum", arg: "case when type == 1 then volume else 0 end")
#  totalSellVolume: BigDecimal! @aggregate(fn: "sum", arg: "case when type == 2 then volume else 0 end")
#
#  amountBuy: Int8! @aggregate(fn: "sum", arg: "case when type == 1 then 1 else 0 end")
#  amountSell: Int8! @aggregate(fn: "sum", arg: "case when type == 2 then 1 else 0 end")
#}